--- minetest/src/filesys.cpp	2025-05-13 00:27:31.122594931 +0200
+++ minetest/src/filesys.cpp	2025-05-12 23:38:54.980292652 +0200
@@ -28,6 +28,7 @@
 #include "log.h"
 #include "config.h"
 #include "porting.h"
+#include "notify_fs.h"
 #ifndef SERVER
 #include "irr_ptr.h"
 #endif
@@ -100,8 +101,10 @@
 bool CreateDir(const std::string &path)
 {
 	bool r = CreateDirectory(path.c_str(), NULL);
-	if(r == true)
+	if(r == true) {
+		notify_file_modified(path);
 		return true;
+	}
 	if(GetLastError() == ERROR_ALREADY_EXISTS)
 		return true;
 	return false;
@@ -145,6 +148,7 @@
 					<< path << std::endl;
 			return false;
 		}
+		notify_file_deleted(path);
 		return true;
 	}
 	infostream << "RecursiveDelete: Deleting content of directory "
@@ -164,6 +168,7 @@
 				<< path << std::endl;
 		return false;
 	}
+	notify_file_deleted(path);
 	return true;
 }
 
@@ -175,11 +180,17 @@
 	if(!is_directory)
 	{
 		bool did = DeleteFile(path.c_str());
+		if (did) {
+			notify_file_deleted(path);
+		}
 		return did;
 	}
 	else
 	{
 		bool did = RemoveDirectory(path.c_str());
+		if (did) {
+			notify_file_deleted(path);
+		}
 		return did;
 	}
 }
@@ -282,15 +293,15 @@
 bool CreateDir(const std::string &path)
 {
 	int r = mkdir(path.c_str(), S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH);
-	if (r == 0) {
+	if(r == 0) {
+		notify_file_modified(path);
 		return true;
 	}
-
+	
 	// If already exists, return true
 	if (errno == EEXIST)
 		return true;
 	return false;
-
 }
 
 bool PathExists(const std::string &path)
@@ -333,6 +344,7 @@
 					<< path << std::endl;
 			return false;
 		}
+		notify_file_deleted(path);
 		return true;
 	}
 	infostream << "RecursiveDelete: Deleting content of directory "
@@ -352,6 +364,7 @@
 				<< path << std::endl;
 		return false;
 	}
+	notify_file_deleted(path);
 	return true;
 }
 
@@ -408,6 +421,9 @@
 		if (!did)
 			errorstream << "rmdir errno: " << errno << ": " << strerror(errno)
 					<< std::endl;
+		if (did) {
+			notify_file_deleted(path);
+		}
 		return did;
 	}
 
@@ -415,6 +431,9 @@
 	if (!did)
 		errorstream << "unlink errno: " << errno << ": " << strerror(errno)
 				<< std::endl;
+	if (did) {
+		notify_file_deleted(path);
+	}
 	return did;
 }
 
@@ -572,6 +591,9 @@
 		<<source<<" to "<<target<<std::endl;
 	fclose(sourcefile);
 	fclose(targetfile);
+	if (retval) {
+		notify_file_modified(target);
+	}
 	return retval;
 }
 
@@ -598,6 +620,9 @@
 				}
 			}
 		}
+		if (retval) {
+			notify_file_modified(target);
+		}
 		return retval;
 	}
 
@@ -617,6 +642,8 @@
 		}
 	}
 
+	// Todo: notify_file_deleted(source), but recursive update for moved files
+
 	// Try renaming first which is instant
 	if (fs::Rename(source, target))
 		return true;
@@ -851,6 +878,7 @@
 		return false;
 	}
 
+	notify_file_modified(path);
 	return true;
 }
 
@@ -909,6 +937,8 @@
 			}
 			total_read += bytes_read;
 		}
+
+		notify_file_modified(fullpath);
 	}
 
 	return true;
@@ -932,7 +962,12 @@
 
 bool Rename(const std::string &from, const std::string &to)
 {
-	return rename(from.c_str(), to.c_str()) == 0;
+	bool success = rename(from.c_str(), to.c_str()) == 0;
+	if (success) {
+		notify_file_deleted(from);
+		notify_file_modified(to);
+	}
+	return success;
 }
 
 } // namespace fs
